/*
 
3) Robot 2D Pattern Formation

The coordination of large groups of robots is an active area of research. One example of a challenge in this area is the arrangement of robots into 2D patterns to accomplish some task. For example, to efficiently search a large area the robots might arrange themselves into a long line and move in unison to sweep the space to locate the objective. Another task which also requires formation creation is the coordinated moving of objects. This problem can be solved relatively easily using a single leader robot, but doing so requires that the leader be informed of the state of all of the robots and also results in failure when the leader malfunctions. To address these issues, students who choose this project will use collective intelligence techniques to build a self-organizing robot
pattern forming system.

Core: Implement a large scale (>100 robot) swarm system in which robots are capable of self-organizing into 2D patterns according to the algorithm proposed by Rubinstein, Cornejo and Nagpal (link).

Extensions:

Implement motion in your system. An example would be to program all the robots to move in a common direction and to avoid obstacles while maintaining a 2D pattern.
Implement the possibility for the robots to arrange no solid 2D patterns, i.e. with holes.

https://moodle.upm.es/titulaciones/oficiales/pluginfile.php/583167/mod_page/content/11/%20SHAPEBUGS%20improvement%20-%20programmable%20self-assembling%20%28Rubinstein%20et%20al.%2C%2014%29.pdf



*/



package org.upm;



import sim.engine.SimState;
import sim.engine.Steppable;
import sim.field.continuous.Continuous2D;
import sim.util.Double2D;
import sim.util.MutableDouble2D;
import sim.util.Bag;

public class Robot implements Steppable{


	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	final int id;
	int x_offset;
	int y_offset;
	int [][] img;
	boolean localized = false;
	State state = State.START;
	boolean seed = false;
	boolean stationary = true;
	int DESIRED_DISTANCE;
	double angle = 20;
	MutableDouble2D direction;
	Double2D position;
	double prev = TRS.DISTANCE_MAX;


	boolean gradientSeed = false;
	double gradientValue;
	//gradient formation
	final int GRADIENT_MAX = 1000; //max gradient == maxbots
	int G = 10; //2*Botsize (5*s) 


	static int BLACK = 0;
	static int WHITE = 1;
	static int RED = 2;

	int yieldDistance = 10;


	public Robot(int id, int x_offset, int y_offset, boolean seed, boolean gradientSeed, int[][] image){
		this.id = id;
		this.x_offset = x_offset;
		this.y_offset = y_offset;
		this.seed = seed;
		this.direction = new MutableDouble2D(1, 0);
		this.gradientSeed = gradientSeed;
		this.img = image;
	}


	public void step(SimState state){
		TRS trs = (TRS) state;
		Continuous2D yard = trs.yard;
		MutableDouble2D sumForces = new MutableDouble2D();

		Double2D me = yard.getObjectLocation(this);
		position = new Double2D(me.getX(), me.getY());
		sumForces.addIn(me);
		run(yard, sumForces);
		yard.setObjectLocation(this, new Double2D(sumForces));

	}

	public void edgeFollow(Continuous2D yard, MutableDouble2D sumForces){		
		double current = TRS.DISTANCE_MAX;
		double dist;
		Bag robots = new Bag();
		yard.getNeighborsExactlyWithinDistance(yard.getObjectLocation(this), 1, true, true, true, robots);
		Robot neighbour;
		int len = robots.size();

		for (int i = 0; i < len; i++){
			neighbour = (Robot) robots.get(i);
			dist = yard.getObjectLocation(this).distanceSq(yard.getObjectLocation(neighbour));
			if(dist < current && neighbour.stationary){
				current = dist;
			}
		}

		if(current < DESIRED_DISTANCE){
			if(prev < current){
				sumForces.addIn(new Double2D(direction.getX(), direction.getY()));
			}
			else{
				double xp = direction.getX()*Math.cos(-angle)-direction.getY()*Math.sin(-angle);
				double yp = direction.getX()*Math.sin(-angle)+direction.getY()*Math.cos(-angle);
				direction.setTo(xp, yp);
				sumForces.addIn(new Double2D(direction.getX(), direction.getY()));
			}
		}
		else{
			if(prev > current){
				sumForces.addIn(new Double2D(direction.getX(), direction.getY()));
			}
			else{
				double xp = direction.getX()*Math.cos(-angle)-direction.getY()*Math.sin(-angle);
				double yp = direction.getX()*Math.sin(-angle)+direction.getY()*Math.cos(-angle);
				direction.setTo(xp, yp);
				sumForces.addIn(new Double2D(direction.getX(), direction.getY()));
			}
		}
		prev = current;
	}

	public void gradientFormation (Continuous2D yard){
		if(this.gradientSeed){
			gradientValue = 0;
		}
		else{
			double dist;
			gradientValue = GRADIENT_MAX;
			Bag robots = new Bag();
			yard.getNeighborsExactlyWithinDistance(yard.getObjectLocation(this), 1, true, true, true, robots);
			Robot neighbour;
			int len = robots.size();


			for (int i = 0; i < len; i++){
				neighbour = (Robot) robots.get(i);
				dist = yard.getObjectLocation(this).distanceSq(yard.getObjectLocation(neighbour));

				if(dist > TRS.epsilon && dist < G && neighbour.gradientValue < this.gradientValue && neighbour.id < this.id){
					this.gradientValue = neighbour.gradientValue;
				}
			}
			this.gradientValue+=1;
		}
	}



	public boolean Localization(Continuous2D yard)
	{
		boolean modified = false;
		Double2D oldPos = new Double2D(position.getX(), position.getY());        
		position = yard.getObjectLocation(this);

		if(Math.abs(oldPos.getX()-position.getX()) > TRS.epsilon || 
				Math.abs(oldPos.getY()-position.getY()) > TRS.epsilon)
		{
			modified = true;
		}

		return modified;
	}



	public void run (Continuous2D yard, MutableDouble2D sumForces){
		if(state == State.START){
			if(this.seed){
				state = State.JOINED_SHAPE;
			}
			else{
				//				gradientFormation(yard);
				//				Localization(yard);
				state = State.WAIT_TO_MOVE;
			}

		}
		else if(state == State.WAIT_TO_MOVE){
			System.out.print(state);
			System.out.print(" ");
			Bag robots = new Bag();
			yard.getNeighborsExactlyWithinDistance(yard.getObjectLocation(this), 1, true, true, true, robots);
			Robot neighbour;
			int len = robots.size();
			boolean moving = false;

			for (int i = 0; i < len; i++){
				neighbour = (Robot) robots.get(i);
				if(!neighbour.stationary){
					moving = true;
					break;
				}
			}
			if(!moving){
				int highest_id = -1;
				double h = 0;
				for (int i = 0; i < len; i++){
					neighbour = (Robot) robots.get(i);
					if(h < neighbour.gradientValue && this.id!=neighbour.id){
						h = neighbour.gradientValue;
					}
				}
				if(this.gradientValue > h){
					state = State.MOVE_WHILE_OUTSIDE;
				}
				else if(this.gradientValue == h){
					for (int i = 0; i < len; i++){
						neighbour = (Robot) robots.get(i);
						if(h == neighbour.gradientValue && this.id != neighbour.id){
							highest_id = neighbour.id;
						}
					}
					if(highest_id < this.id){
						state = State.MOVE_WHILE_OUTSIDE;
					}
				}
			}

			System.out.println(state);
		}
		else if(state == State.MOVE_WHILE_OUTSIDE){
			int val = valAt((int)yard.getObjectLocation(this).getY(),(int) yard.getObjectLocation(this).getX());
			if(val == BLACK){
				state = State.MOVE_WHILE_INSIDE;
			}
			edgeFollow(yard, sumForces);

		}
		else if(state == State.MOVE_WHILE_INSIDE){
			int val = valAt((int)yard.getObjectLocation(this).getY(),(int) yard.getObjectLocation(this).getX());
			Bag robots = new Bag();
			yard.getNeighborsExactlyWithinDistance(yard.getObjectLocation(this), 1, true, true, true, robots);
			Robot neighbour = (Robot) robots.get(0);
			int len = robots.size();
			Robot closest_neighbour = neighbour;
			double closest_distance = yard.getObjectLocation(this).distance(yard.getObjectLocation(neighbour));

			for (int i = 1; i < len; i++){
				neighbour = (Robot) robots.get(i);
				if(closest_distance < yard.getObjectLocation(this).distance(yard.getObjectLocation(neighbour)) && closest_distance > 0){
					closest_distance = yard.getObjectLocation(this).distance(yard.getObjectLocation(neighbour));
					closest_neighbour = neighbour;
				}
			}
			if(val == WHITE || closest_neighbour.gradientValue >= this.gradientValue){
				state = State.JOINED_SHAPE;
			}
			edgeFollow(yard, sumForces);			
		}
		else if(state == State.JOINED_SHAPE){

		}
	}


	public int valAt(int y, int x)
	{
		if(x < 0 || y < 0 || y >= this.img.length || x >= this.img[0].length)
		{
			return WHITE;
		}
		else
		{
			return img[img.length-y-1][x];
		}
	}




}